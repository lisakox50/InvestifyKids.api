import React, { useState, useEffect } from "react";

export default function App() {
  const [userId, setUserId] = useState("");
  const [name, setName] = useState("");
  const [role, setRole] = useState("child");
  const [registered, setRegistered] = useState(false);

  const [term, setTerm] = useState("");
  const [explanation, setExplanation] = useState("");

  const [symbol, setSymbol] = useState("");
  const [stockInfo, setStockInfo] = useState(null);
  const [stockError, setStockError] = useState("");

  const [buySymbol, setBuySymbol] = useState("");
  const [buyShares, setBuyShares] = useState(1);
  const [buyMessage, setBuyMessage] = useState("");
  const [buyError, setBuyError] = useState("");

  const [portfolio, setPortfolio] = useState([]);
  const [quests, setQuests] = useState([]);

  // Register user (once per session)
  async function registerUser() {
    if (!name) {
      alert("Please enter your name!");
      return;
    }
    const res = await fetch("http://localhost:5000/register", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name, role }),
    });
    const data = await res.json();
    setUserId(data.user_id);
    setRegistered(true);
  }

  // Explain financial term
  async function explainTerm(e) {
    e.preventDefault();
    if (!term) return;
    const res = await fetch("http://localhost:5000/explain_term", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ term }),
    });
    const data = await res.json();
    setExplanation(data.explanation);
  }

  // Fetch stock price
  async function fetchStock(e) {
    e.preventDefault();
    if (!symbol) return;
    setStockError("");
    setStockInfo(null);
    try {
      const res = await fetch(`http://localhost:5000/stocks/${symbol.toUpperCase()}`);
      if (!res.ok) {
        const err = await res.json();
        setStockError(err.error || "Error fetching stock data");
        return;
      }
      const data = await res.json();
      setStockInfo(data);
    } catch {
      setStockError("Network error");
    }
  }

  // Buy stocks
  async function buyStock(e) {
    e.preventDefault();
    setBuyError("");
    setBuyMessage("");
    if (!userId) {
      setBuyError("You must register first");
      return;
    }
    if (!buySymbol) {
      setBuyError("Please enter stock symbol");
      return;
    }
    if (buyShares <= 0) {
      setBuyError("Number of shares must be positive");
      return;
    }
    try {
      const res = await fetch(`http://localhost:5000/portfolio/${userId}/buy`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ symbol: buySymbol, shares: Number(buyShares) }),
      });
      const data = await res.json();
      if (res.ok) {
        setBuyMessage(data.message);
        loadPortfolio();
        loadQuests();
      } else {
        setBuyError(data.error || "Error buying stock");
      }
    } catch {
      setBuyError("Network error");
    }
  }

  // Load portfolio
  async function loadPortfolio() {
    if (!userId) return;
    const res = await fetch(`http://localhost:5000/portfolio/${userId}`);
    if (res.ok) {
      const data = await res.json();
      setPortfolio(data.portfolio);
    }
  }

  // Load quests
  async function loadQuests() {
    if (!userId) return;
    const res = await fetch(`http://localhost:5000/quests/${userId}`);
    if (res.ok) {
      const data = await res.json();
      setQuests(data.quests);
    }
  }

  // After registration or buying, update portfolio and quests
  useEffect(() => {
    if (registered) {
      loadPortfolio();
      loadQuests();
    }
  }, [registered]);

  return (
    <div className="min-h-screen bg-gradient-to-r from-blue-50 to-green-100 p-6">
      <h1 className="text-center text-4xl font-bold mb-6 text-blue-700">InvestifyKids</h1>

      {!registered ? (
        <section className="max-w-md mx-auto bg-white p-6 rounded shadow">
          <h2 className="text-xl font-semibold mb-4">Register</h2>
          <input
            type="text"
            placeholder="Your name"
            className="border p-2 rounded w-full mb-3"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <select
            className="border p-2 rounded w-full mb-3"
            value={role}
            onChange={(e) => setRole(e.target.value)}
          >
            <option value="child">Child</option>
            <option value="parent">Parent</option>
          </select>
          <button
            onClick={registerUser}
            className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
          >
            Register
          </button>
        </section>
      ) : (
        <>
          <section className="max-w-md mx-auto bg-white p-6 rounded shadow mb-8">
            <h2 className="text-xl font-semibold mb-3">Explain a financial term</h2>
            <form onSubmit={explainTerm} className="flex gap-2">
              <input
                type="text"
                placeholder="e.g. stock"
                className="border p-2 rounded flex-grow"
                value={term}
                onChange={(e) => setTerm(e.target.value)}
                required
              />
              <button
                type="submit"
                className="bg-blue-600 text-white px-4 rounded hover:bg-blue-700"
              >
                Explain
              </button>
            </form>
            {explanation && <p className="mt-4 bg-gray-100 p-3 rounded">{explanation}</p>}
          </section>

          <section className="max-w-md mx-auto bg-white p-6 rounded shadow mb-8">
            <h2 className="text-xl font-semibold mb-3">Check Stock Price</h2>
            <form
              onSubmit={fetchStock}
              className="flex gap-2"
            >
              <input
                type="text"
                placeholder="e.g. AAPL"
                className="border p-2 rounded flex-grow"
                value={symbol}
                onChange={(e) => setSymbol(e.target.value)}
                required
              />
              <button className="bg-blue-600 text-white px-4 rounded hover:bg-blue-700">Check</button>
            </form>
            {stockInfo && (
              <p className="mt-4">
                <strong>{stockInfo.name}</strong> ({stockInfo.symbol}): ${stockInfo.price}
              </p>
            )}
            {stockError && <p className="mt-4 text-red-600">{stockError}</p>}
          </section>

          <section className="max-w-md mx-auto bg-white p-6 rounded shadow mb-8">
            <h2 className="text-xl font-semibold mb-3">Buy Stock</h2>
            <form onSubmit={buyStock} className="space-y-3">
              <input
                type="text"
                placeholder="Stock symbol (e.g. AAPL)"
                className="border p-2 rounded w-full"
                value={buySymbol}
                onChange={(e) => setBuySymbol(e.target.value)}
                required
              />
              <input
                type="number"
                min="1"
                className="border p-2 rounded w-full"
                value={buyShares}
                onChange={(e) => setBuyShares(e.target.value)}
                required
              />
              <button className="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700">
                Buy
              </button>
            </form>
            {buyMessage && <p className="mt-3 text-green-700">{buyMessage}</p>}
            {buyError && <p className="mt-3 text-red-600">{buyError}</p>}
          </section>

          <section className="max-w-md mx-auto bg-white p-6 rounded shadow mb-8">
            <h2 className="text-xl font-semibold mb-3">Your Portfolio</h2>
            {portfolio.length === 0 ? (
              <p>No stocks purchased yet.</p>
            ) : (
              <table className="w-full table-auto border-collapse border border-gray-300">
                <thead>
                  <tr>
                    <th className="border border-gray-300 p-2">Symbol</th>
                    <th className="border border-gray-300 p-2">Shares</th>
                    <th className="border border-gray-300 p-2">Price at Purchase</th>
                  </tr>
                </thead>
                <tbody>
                  {portfolio.map((item, idx) => (
                    <tr key={idx}>
                      <td className="border border-gray-300 p-2">{item.symbol}</td>
                      <td className="border border-gray-300 p-2">{item.shares}</td>
                      <td className="border border-gray-300 p-2">${item.price_at_purchase}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </section>

          <section className="max-w-md mx-auto bg-white p-6 rounded shadow">
            <h2 className="text-xl font-semibold mb-3">Quests</h2>
            {quests.length === 0 ? (
              <p>No quests available.</p>
            ) : (
              <ul className="list-disc list-inside">
                {quests.map((q) => (
                  <li key={q.id} className={q.completed ? "text-green-700" : "text-gray-700"}>
                    {q.title} {q.completed ? "(Completed)" : "(Incomplete)"}
                  </li>
                ))}
              </ul>
            )}
          </section>
        </>
      )}
    </div>
  );
}
